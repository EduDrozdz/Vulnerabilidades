import java.sql.*;
import java.util.Scanner;
import java.security.SecureRandom;
import java.security.spec.KeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

public class VulnerableLogin {
    private static final int ITERATIONS = 80_000;
    private static final int KEY_LENGTH = 256; // bits
    private static final String ALGO = "PBKDF2WithHmacSHA256";

    public static void main(String[] args) {
        String url = "jdbc:h2:mem:demo;DB_CLOSE_DELAY=-1";
        String dbUser = "sa";
        String dbPass = "";

        // Fecha Scanner automaticamente (evita resource leak)
        try (Scanner scanner = new Scanner(System.in);
             // Conexão em try-with-resources
             Connection conn = DriverManager.getConnection(url, dbUser, dbPass)) {

            // Cria tabela com salt+hash em vez de armazenar senha em texto
            try (Statement s = conn.createStatement()) {
                s.execute("CREATE TABLE IF NOT EXISTS users(" +
                          "username VARCHAR(50) PRIMARY KEY, " +
                          "salt VARBINARY(32) NOT NULL, " +
                          "hash VARBINARY(64) NOT NULL" +
                          ");");
            }

            // Gera/atualiza usuário demo já com salt+hash (não salva senha em texto)
            upsertUser(conn, "alice", "password123");

            System.out.print("Usuário: ");
            String username = scanner.nextLine().trim();

            System.out.print("Senha: ");
            String pwd = scanner.nextLine();

            // Autentica usando PreparedStatement (evita SQL Injection) e hash seguro
            if (authenticate(conn, username, pwd)) {
                // Não imprimir senha ou query — resposta genérica/amigável
                System.out.println("Bem-vindo " + username + "!");
            } else {
                System.out.println("Usuário ou senha incorretos.");
            }
        } catch (SQLException e) {
            // Mensagem genérica — sem expor stack trace/detalhes internos
            System.err.println("Erro ao acessar o banco de dados.");
        } catch (Exception e) {
            System.err.println("Erro ao processar a solicitação.");
        }
    }

    // Usa PreparedStatement e PBKDF2 para inserir salt+hash (sem revelar senha)
    private static void upsertUser(Connection conn, String username, String rawPassword) throws Exception {
        byte[] salt = new byte[32];
        new SecureRandom().nextBytes(salt);
        byte[] hash = pbkdf2(rawPassword.toCharArray(), salt, ITERATIONS, KEY_LENGTH);

        String sql = "MERGE INTO users (username, salt, hash) KEY (username) VALUES (?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username);
            ps.setBytes(2, salt);
            ps.setBytes(3, hash);
            ps.executeUpdate();
        }
    }

    // PreparedStatement para evitar concatenação de entrada do usuário em queries
    private static boolean authenticate(Connection conn, String username, String rawPassword) throws Exception {
        String sql = "SELECT salt, hash FROM users WHERE username = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username);
            try (ResultSet rs = ps.executeQuery()) {
                if (!rs.next()) return false;
                byte[] salt = rs.getBytes("salt");
